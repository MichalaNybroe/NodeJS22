https://svelte.dev/tutorial/basics


Tool for building fast web applications

--Svelte converts your app into ideal JavaScript at build time, rather than interpreting your application code at run time. This means you don't pay the performance cost of the framework's abstractions, and you don't incur a penalty when your app first loads.

--A component is a reusable self-contained block of code that encapsulates HTML, CSS and JavaScript that belong together, written into a .svelte file. 

- refering to variables in components with {}

- svelte will warn if we are making inaccessible markup (tut intro c)

- use of nested components via import and then <x/> referance in html

- rendering html in html using @html before referance to variable ** be aware xss attacks : Manually escape HTML from sources we do not trust

- To create an app: integrate build tool (vite) : npm create vite@latest my-app -- --template svelte
--Once set up : compiler turns each component into a js class -> use svelte components by using new
---Remove lib folder, everything in app.svelte and svg file in assets
- install svelte by npm install 



Reactivity
- svelte keeps dom insync application variables
- keeeping variables in synch with each other (declarations)
    let count = 0;
	$: doubled = count * 2;
- when using desclarations one might also use Statements
- sveltes reactivity is triggered by assigment - not just calling updates on objects.


Summary:

Intro
Can write directly in svelte both html, css and scripts
 Refer to variable {name} in html
Can give attributes the same way
 <img src = {src}>
 could be just <img {src}> because it is the same name
Can import components in components
 import Nested from './Nested.svelte';
 then in html referance <Nested/>
 **css from one component does not interfere/overwrite in the next
Can render html directly in a component 
 {@html x} - x being the variable
 **watch out for xss attacks
Make a Svelte app
 npm create vite@latest my-app -- --template svelte
 npm install
 npm run dev
 : delete lib, all in app.svelte and svg file in assets

Reactivity
Can keep DOM in sync with application Statements
Can keep variables in sync with one another
 $: var2 = var1 manipulate
Can make use of statements 
 $: {code (including if statemnts etc)}
Can update objects but has to be through assignments
 x = [...x, x.length + 1]
 ** Always has to = x on right side